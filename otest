:- use_module(tosc, [sendOSC/2]).

:- use_module(library(pce)).

:- pce_begin_class(name_asker, dialog,
                   "Modal prompter for a name").

initialise(W, Label:[name]) :->
        "Initialise the window and fill it"::
        send_super(W, initialise(Label)),
        send(W, append(text_item(name))),
        send(W, append(button(ok))),
        send(W, append(button(cancel))),
        send(W, default_button(ok)).
        
ok(W) :->
        "User pressed the OK button"::
        get(W, member(name), NameItem),
        get(NameItem, selection, Typed),
        send(W, return, Typed).

cancel(W) :->
        "User pressed the Cancel button"::
        send(W, return(@nil)).

prompt(W, Value:name) :<-
        "Open it, destroy it and return the result"::
        get(W, confirm, Value),
        free(W).

:- pce_end_class.


sound(Sound,N)        :- sendOSC(s_new,[Sound,N,0,1]).

effect(Effect,N,Args) :- sendOSC(s_new,[Effect,N,1,1|Args]).

kill(N)    :- integer(N),!,sendOSC(n_free,[N]).
kill([]).
kill([H|T]) :- sendOSC(n_free,[H]), kill(T).

off([]).
off([N|Ns]) :- off(N), off(Ns).  % Graceful shutoff (sound fades)
off(N)     :- integer(N), sendOSC(n_run,[N,0]).

on([]).
on([N|Ns]) :- on(N), on(Ns).
on(N)     :- integer(N), sendOSC(n_run,[N,1]).

fast(N)    :- sendOSC(n_set,[N,rate,23.98]).
medium(N)  :- sendOSC(n_set,[N,rate,3]).
slow(N)    :- sendOSC(n_set,[N,rate,1.1]).
realslow(N)    :- sendOSC(n_set,[N,rate,1.1]).
freeAll    :- sendOSC(freeAll,[]).

wah(N,Wah)    :- sendOSC(s_new,[wah,Wah,3,N]).
reverb(N,Rev) :- sendOSC(s_new,[reverb,Rev,3,N,wet,0.4]).

sctest(Node) :-             % Start SuperCollider if necessary
        shell('C:/cygwin/bin/bash -c "ps -W | grep scide',Return),
	(Return = 2 -> writeln('SuperCollider was running') ;
	  cd('C:/cygwin/home/peterr/sc'),
	  win_exec('C:/cygwin/home/peterr/sc/scide.exe',hide),
	  writeln('Waiting for SuperCollider to boot'),
	  sleep(16)
        ),
	EchoNode is Node + 1,
	Wah is Node + 10,
        Rev is Node + 11,
        writeln('Running sctest with Node #'(Node)),
%       sound(mtish,Node),
        sound(rain,Node),
        sleep(10),
        R2 is Node + 5,
        sound(rain,R2),
	Noises = [Node,R2],
	sendOSC(n_set,[R2,out,1, rate,6]),
        sleep(4),
        realslow(Node),
        sleep(4),
        realslow(R2),
	on(Node),
        sleep(2),
%        effect(echo,EchoNode,[delay,0.1,decay,1]),
        sleep(4),
        slow(Node),
        sleep(3),
        medium(Node),
        sleep(3),
        fast(Node),
        sleep(3),
        fast(R2),
%        off(Node),
        sleep(2),
	on(Node),
        sleep(4),
	wah(Node,Wah),
        sleep(4),
	reverb(Node,Rev),
        get(name_asker('Register'), prompt, _),
        off(Noises),
        sleep(4),
	kill([Node,R2,EchoNode,Wah,Rev]),
	halt.


